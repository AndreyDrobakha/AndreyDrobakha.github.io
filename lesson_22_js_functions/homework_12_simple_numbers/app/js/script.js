"use strict";!function(r,t){r:for(var f=r;f<t;f++){for(var i=2;i<f;i++)if(f%i==0)continue r;alert("Это простые числа в заданном промежутке: "+f)}}(5,25);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
